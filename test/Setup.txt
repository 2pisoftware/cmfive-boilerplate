
1) Setup Cosine environment, using end-to-end containers with default/dev/test MySQL container.
   - docker-compose in boilerplate root folder will standup up a typical dev/test container deployment
   - Manage install & symlinking for CORE and CUSTOM MODULES per the target module code for testing
   
2) Check-or-Add settings to your config.php:

			//========== TestRunner Configuration ========================== 
			Config::set("system.environment", "development");
			Config::set("core_template.foundation.reveal.animation", "none");
			Config::set("core_template.foundation.reveal.animation_speed", 0);
			Config::set('tests', ['testrunner'  => 'ENABLED']);

			//========== Database Configuration ==========================
			Config::set("database", [
				"hostname"  => getenv('DB_HOST') ?: "mysqldb",
				"port"  => getenv('DB_PORT') ?: "3306",
				"username"  => getenv('DB_USERNAME') ?: "cmfive",
				"password"  => getenv('DB_PASSWORD') ?: "cmfive",
				"database"  => getenv('DB_DATABASE') ?: "cmfive",
				"driver"    => getenv('DB') ?: "mysql",
				"backups" =>
				[
					'outputExt' => 'sql',
					'commandPath' => [
						'unix' => '/usr/bin/',
					],
					'backupCommand' => [
						'unix' => 'mysqldump -u $username -h $hostname -P $port -p\'$password\' $dbname > $filename',
					],
					'restoreCommand' => [
						'unix' => 'mysql -u $username -h $hostname -P $port -p\'$password\' $dbname < $filename',
					],
				]
			]);
 
3) run "docker_run_tests.sh"
   - check if you need to run chmod 755 docker_run_tests.sh for permission


