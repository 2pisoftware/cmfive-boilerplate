stages:
  - .pre
  - build
  - test

setup:
  image: alpine
  stage: .pre
  script: |
    echo "== Setting up environment =="
    if [ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]; then
      export TAG="latest"
    elif [ $CI_MERGE_REQUEST_IID ]; then
      export TAG="mr-$CI_MERGE_REQUEST_IID"
    else
      export TAG=$CI_COMMIT_REF_SLUG
    fi
    export FULL_TAG=${CI_REGISTRY_IMAGE}:${TAG}
    echo "🏷️ DOCKER_TAG will be $FULL_TAG"
    echo "== Saving full tag name to tag.env =="
    echo "DOCKER_TAG=$FULL_TAG" > tag.env
    echo ""
    echo "== Setting up core branch =="
    if [ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]; then
      export COSINE_CORE_BRANCH="main"
    else
      export COSINE_CORE_BRANCH="develop"
    fi
    echo "Core branch is $COSINE_CORE_BRANCH"
    echo "BUILT_IN_CORE_BRANCH=$COSINE_CORE_BRANCH" >> tag.env
    echo ""
    echo "== Setting up DB config for tests =="
    # DB_HOST=mysql-8 \
    # -e DB_USERNAME=$DB_USERNAME \
    # -e DB_PASSWORD=$DB_PASSWORD \
    # -e DB_DATABASE=$DB_DATABASE \
    export DB_HOST="mysql"
    export DB_USERNAME="runner"
    export DB_PASSWORD="cmfive"
    export DB_DATABASE="cmfive"
    echo "DB_HOST=$DB_HOST" >> tag.env
    echo "DB_USERNAME=$DB_USERNAME" >> tag.env
    echo "DB_PASSWORD=$DB_PASSWORD" >> tag.env
    echo "DB_DATABASE=$DB_DATABASE" >> tag.env
  artifacts:
    reports:
      dotenv: tag.env

#add includes
include:
  - component: $CI_SERVER_FQDN/2pisoftware/pipelines/docker/build@v1.1.0
    inputs:
      tag: $DOCKER_TAG
      additional_args: --build-arg BUILT_IN_CORE_BRANCH=$BUILT_IN_CORE_BRANCH

  - component: $CI_SERVER_FQDN/2pisoftware/pipelines/playwright/test@v1.0.4
    inputs:
      image: mcr.microsoft.com/playwright:v1.49.0-jammy
      directory: ./test/playwright/
      test_results_dir: ./test/playwright/test-results
      run_cmd: npx playwright install --with-deps && npm run build && npm run test
      wait_on: http://test-website

playwright-test:
  services:
    - name: $DOCKER_TAG
      alias: test-website
    - mysql:8.0
  variables:
    BASE_URL: http://test-website
    MYSQL_DATABASE: cmfive
    MYSQL_ROOT_PASSWORD: cmfive
  before_script:
    # set up the database
    # - mysql --user=root --password="$MYSQL_ROOT_PASSWORD"
    # DB_HOST=mysql-8 \
    # -e DB_USERNAME=$DB_USERNAME \
    # -e DB_PASSWORD=$DB_PASSWORD \
    # -e DB_DATABASE=$DB_DATABASE \
    # - docker exec -i $DOCKER_TAG /bin/bash -c "export DB_HOST=mysql && export DB_USERNAME=runner && export DB_PASSWORD=$MYSQL_ROOT_PASSWORD && DB_DATABASE=$MYSQL_DATABASE"
    # - docker exec -i $DOCKER_TAG /bin/bash -c "rm -f /var/www/html/cache/config.cache"
    # - docker exec -i $DOKCER_TAG /bin/bash -c ""
    - node --version
    # - php cmfive.php install core
    - git clone --depth 1 https://github.com/2pisoftware/cmfive-core.git -b $BUILT_IN_CORE_BRANCH
    - cd cmfive-core
    - git status
    - cd ..
    - ln -s cmfive-core/system/ system
  



