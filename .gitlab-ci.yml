stages:
  - setup
  - core
  - docker
  - test

buildvars:
  image: alpine:latest
  stage: setup
  script: |
    echo $CI_JOB_TOKEN
    echo "== Setting up environment =="
    if [ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]; then
      export TAG="latest"
    elif [ $CI_MERGE_REQUEST_IID ]; then
      export TAG="mr-$CI_MERGE_REQUEST_IID"
    else
      export TAG=$CI_COMMIT_REF_SLUG
    fi
    export FULL_TAG=${CI_REGISTRY_IMAGE}/cosine:${TAG}
    echo "🏷️ DOCKER_TAG will be $FULL_TAG"
    echo "== Saving full tag name to tag.env =="
    echo "DOCKER_TAG=$FULL_TAG" > .env
    echo ""
    echo "== Setting up core branch =="
    if [ "$CI_COMMIT_REF_NAME" = "$CI_DEFAULT_BRANCH" ]; then
      export COSINE_CORE_BRANCH="main"
    else
      export COSINE_CORE_BRANCH="develop"
    fi
    echo "Core branch is $COSINE_CORE_BRANCH"
    echo "BUILT_IN_CORE_BRANCH=$COSINE_CORE_BRANCH" >> .env
    echo ""
  artifacts:
    reports:
      dotenv: .env

prepare-core:
  stage: core
  image: node:alpine
  script: |
    echo "== Preparing a core for tag: $DOCKER_TAG =="
    echo "== Downloading core =="
    URL=$CI_SERVER_FQDN/api/v4/projects/$CORE_REPO/repository/archive?sha=refs/head/$BUILT_IN_CORE_BRANCH
    echo "URL: $URL"
    wget $URL -O core.tar.gz --header="PRIVATE_TOKEN: $CI_JOB_TOKEN"
    tar xzf core.tar.gz
    echo "== Compiling theme =="
    cd core/system/templates/base
    npm ci || npm install
    npm run prod || npm run production
  artifacts:
    paths:
      - core
    exclude:
      - core/system/templates/base/node_modules/**/*
    expire_in: 1 day
  needs:
    - buildvars

include:
  # Build the Docker image
  - component: $CI_SERVER_FQDN/2pisoftware/pipelines/docker/build@v1.1.0
    inputs:
      tag: "$DOCKER_TAG"
      stage: docker

  # Run Playwright tests
  - component: $CI_SERVER_FQDN/2pisoftware/pipelines/playwright/test@v1.0.4
    inputs:
      image: mcr.microsoft.com/playwright:v1.49.0-jammy
      directory: ./test/playwright/
      test_results_dir: ./test/playwright/test-results
      run_cmd: npm run build && npm run test
      wait_on: http-get://test-website

# Add core to the build job
docker-build:
  before_script: |
    echo "== Core information =="
    cd core
    git status
    echo "== Building tag: $DOCKER_TAG =="
  dependencies:
    - buildvars
    - prepare-core

playwright-test:
  services:
    # Database
    - name: mysql:8.0
      alias: cosine-db
      command: [ "--default-authentication-plugin=mysql_native_password" ]
    # Cosine
    - name: $DOCKER_TAG
      alias: test-website
  variables:
    FF_NETWORK_PER_BUILD: 1
    CI_DEBUG_SERVICES: "true"
    TEST_HOST: http://test-website
    TEST_PORT: 80
    TIMEOUT: 40_000
    ENVIRONMENT: development
    MYSQL_ROOT_PASSWORD: cosine
    MYSQL_HOST: cosine-db
    DB_HOST: cosine-db
    MYSQL_DATABASE: cosine
    DB_DATABASE: cosine
    MYSQL_USER: cosine
    DB_USERNAME: root
    MYSQL_PASSWORD: cosine
    DB_PASSWORD: cosine
  before_script:
    - cd core
    - git status
    - cd ..
    - ln -s core/system/ system
  dependencies:
    - buildvars
    - prepare-core


